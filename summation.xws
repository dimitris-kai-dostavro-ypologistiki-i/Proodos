FactorialPower(x,m):={ // Υπολογισμός Παραγοντικής Δύναμης για θετικό ή αρνητικό εκθέτη με χρήση αναδρομής
  local n,p;  // βοηθητικές μεταβλητές για υπολογισμό δύναμης με θετικό εκθέτη και αρνητικό εκθέτη αντίστοιχα

  if(x==0){
    return(0);
  }
  n:=m-1;
  p:=m+1;
  if(m==0 && n!=0 && p!=0){ //  Υπολογισμός x^0 (παραγοντικής δύναμης)
    return(1);
  }
  if(n==0){
    return(x);
  }
  if(p==0){
    return(1/(x+1));
  }
  else{ // Αν είναι θετικό το m
    if(m>0){
      return(FactorialPower(x,n)*(x-n));
    }
    if(m<0){
      return((1/(x-m))*FactorialPower(x,p));
    }
  }
}:;

sumpoly(f,k):={ // Πολυώνυμο f(k), k
  local p;
  local vath_pol;    
  local table_t,size_t;
  local m,s,cnt,temp_sum,total_sum;  

  p:=symb2poly(f,k); // p -> Πίνακας συντελεστών αρχικού πολυωνύμου
  vath_pol:=degree(p);  // βαθμός πολυωνύμου

  size_t:= vath_pol+1;   // μέγεθος πίνακα συντελεστών(αντιστοιχίας) που θα κατασκευαστεί 
  table_t:= ConstructTable(size_t);  // κατασκευή πίνακα συντελεστών αντιστοιχίας κανονικών δυνάμεων σε φθίνουσες παραγοντικές  

 
  total_sum:=0; // τελικό άθροισμα
  s:=0;  // βοηθητική μεταβλητή για πρόσβαση στον πίνακα p[]
  for(m:=vath_pol; m>=0; m--){     
     temp_sum:=0;    // temp_sum -> αντικατάσταση κανονικής δύναμης σε φθίνουσα παραγοντική δύναμη, υπολογισμός μερικού αθροίσματος και προσθήκη συνολικού αποτελέσματος για κάθε όρο στην temp_sum
     for(cnt:=0; cnt<=m; cnt++){
        temp_sum:= temp_sum + table_t[m,cnt]*(FactorialPower(n,cnt+1))/(cnt+1); 
     }
     total_sum:= total_sum + p[s]*temp_sum; // προσθήκη επιμέρους αθροισμάτων στο συνολικό άθροισμα με τους κατάλληλους συντελεστές πολυωνύμου  
     s++;
   }  

  return(total_sum);

}:;

// κατασκευή πίνακα συντελεστών φθίνουσων παραγοντικών δυνάμεων που αντιστοιχούν σε κανονικές δυνάμεις(StirlingS2 στο Mathematica)
ConstructTable(size_t):={    
  local n,k;  //n-> γραμμές, k-> στήλες
  local table_t:= matrix(size_t,size_t);  

  for(n:=0; n<size_t; n++){
      for(k:=0; k<size_t; k++){
         if(n==k){
            table_t[n,k]:=1;
         }
         else{  //n!=k
            if(n<k){
               table_t[n,k]:=0;
            }
            else{  // n>k
               if(k==0){
                 table_t[n,k]:=0;
               }
               else{
                 table_t[n,k]:= k*table_t[n-1,k]+table_t[n-1,k-1]; 
               }
            }            
         }
      }
  }
  return(table_t);  
}:;